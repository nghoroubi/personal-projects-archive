// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	"amadeus-go/pkg/service"
	"github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	SearchEndpoint        endpoint.Endpoint
	ReserveFlightEndpoint endpoint.Endpoint
	CancelPNREndpoint     endpoint.Endpoint
	ETIssueEndpoint       endpoint.Endpoint
	HealthCheckEndpoint   endpoint.Endpoint
	AirRevalidateEndpoint endpoint.Endpoint
	AirRulesEndpoint      endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.Service, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		// CancelPNREndpoint:     MakeCancelPNREndpoint(s),
		ETIssueEndpoint:       MakeETIssueEndpoint(s),
		HealthCheckEndpoint:   MakeHealthCheckEndpoint(s),
		ReserveFlightEndpoint: MakeReserveFlightEndpoint(s),
		SearchEndpoint:        MakeSearchEndpoint(s),
		AirRulesEndpoint:      MakeAirRulesEndpoint(s),
	}
	for _, m := range mdw["Search"] {
		eps.SearchEndpoint = m(eps.SearchEndpoint)
	}
	for _, m := range mdw["AirBook"] {
		eps.ReserveFlightEndpoint = m(eps.ReserveFlightEndpoint)
	}
	for _, m := range mdw["CancelPNR"] {
		eps.CancelPNREndpoint = m(eps.CancelPNREndpoint)
	}
	for _, m := range mdw["AirBookingData"] {
		eps.ETIssueEndpoint = m(eps.ETIssueEndpoint)
	}
	for _, m := range mdw["HealthCheck"] {
		eps.HealthCheckEndpoint = m(eps.HealthCheckEndpoint)
	}
	for _, m := range mdw["AirRevalidate"] {
		eps.AirRevalidateEndpoint = m(eps.AirRevalidateEndpoint)
	}
	for _, m := range mdw["AirRules"] {
		eps.AirRulesEndpoint = m(eps.AirRulesEndpoint)
	}
	return eps
}
